(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{603:function(p,v,e){"use strict";e.r(v);var t=e(34),i=Object(t.a)({},(function(){var p=this,v=p.$createElement,e=p._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":p.$parent.slotKey}},[e("h1",{attrs:{id:"libp2p学习"}},[p._v("libp2p学习")]),p._v(" "),e("h2",{attrs:{id:"p2p网络与传统c-s网络区别"}},[p._v("P2P网络与传统C/S网络区别")]),p._v(" "),e("ul",[e("li",[e("p",[p._v("p2p网络的每个节点既是客户端，也是服务器")])]),p._v(" "),e("li",[e("p",[p._v("p2p网络的每个节点，都是数据的发起者和存储着")])]),p._v(" "),e("li",[e("p",[p._v("p2p网络不稳定，节点可能进进出出")])]),p._v(" "),e("li",[e("p",[p._v("p2p网络需要某种机制来实现节点的发现和查找")])]),p._v(" "),e("li",[e("p",[p._v("p2p网络需要 NAT traversal/ Hole punching等技术来允许两个节点之间通信。")])]),p._v(" "),e("li",[e("p",[p._v("p2p网络需要投入额外的精力来保证公平")])]),p._v(" "),e("li",[e("p",[p._v("p2p 网络需要更好的安全和验证机制。")])])]),p._v(" "),e("p",[e("img",{attrs:{src:"C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5Cmarktext%5Cimages%5Ca11be2edbe001814c9ef73241344d9871f9dc249.png",alt:"Stun & Hole Punching"}})]),p._v(" "),e("h2",{attrs:{id:"libp2p-简介"}},[p._v("libp2p 简介")]),p._v(" "),e("p",[p._v("libp2p包含一些列协议实现，这些协议共同作用，完成了：")]),p._v(" "),e("ul",[e("li",[e("p",[p._v("p2p 网络的传输层（下图绿色）：支持几乎所有的主流传输协议，甚至允许不同节点间使用不同的传输层，比如 native 节点间优先使用 QUIC，而 native 和 web 节点间使用 websocket。")])]),p._v(" "),e("li",[e("p",[p._v("节点发现（黄色，注意这里 PKI 是指基于 PKI 的节点身份）：一般本地网络可以使用 mDNS，大规模 p2p 网络一般使用 bootstrap 来连接初始节点，然后通过 gossip 获取更多节点信息，并通过 Kad DHT 来查找节点。")])]),p._v(" "),e("li",[e("p",[p._v("节点路由（蓝色）：主要使用 Kad DHT 通过多跳来路由到网络中任意一个节点")])]),p._v(" "),e("li",[e("p",[p._v("内容路由（紫色）：如果点对点发送消息，可以通过 Kad DHT，如果在网络中 flood，可以通过 floodsub 和 gossipsub 来对某个 topic 的内容进行广播。")])]),p._v(" "),e("li",[e("p",[p._v("NAT traversal（红色）：包括主流的 hole punching 解决方案")])])]),p._v(" "),e("p",[e("img",{attrs:{src:"C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5Cmarktext%5Cimages%5C96b62de21366db5a3c3f65cbed269818e284ebc7.png",alt:"p2p-stack"}})]),p._v(" "),e("h3",{attrs:{id:"网络身份-network-identity"}},[p._v("网络身份：Network identity")]),p._v(" "),e("p",[p._v("对于一个P2P网络，一个节点想让别人认识它并接受它的一个前提是它要有可以被识别的节点身份。这个就是Network identity。libp2p使用公钥/私钥对来产生network identity：")]),p._v(" "),e("p",[p._v("私钥用于数据的签名，公钥作为PeerId。")]),p._v(" "),e("p",[p._v("一般来说，一个节点在初始化之后，应该产生一个配置文件，保存节点的公钥私钥，以便节点以后反复运行时能够使用相同的身份。")]),p._v(" "),e("h3",{attrs:{id:"传输协议-transport"}},[p._v("传输协议：Transport")]),p._v(" "),e("p",[p._v("在p2p网络中，节点间传输协议的选择需要非常多样，这是因为网络中有可能运行着各种版本，甚至不同实现的节点，因为，支持一个范围广泛的传输协议共节点连接时协商，便变得非常必要。此为，p2p网络需要额外的安全性，不仅仅时消息的加密，还有消息发送者的身份验证 ——你可以将其类比成使能了mutual auth的TLS:客户端验证服务器的证书来确保连接的时合法的服务器，而服务器同时也验证客户端的证书确保访问的时合法的客户端。")]),p._v(" "),e("p",[p._v('为了实现这一目的，libp2p抽象出了Transport层，它负责传输协议的协商，包括使用什么样的传输协议，使用什么样的安全机制，以及如果做多路复用(stream multiplexing)。基本上，这对应了ISO/OSi模型的：传输层(比如用TCP) 和会话层(比如用Noise+Yamux)。如果你使用过websocket，那么你对一个HTTP连接“upgrade"成websocket并不陌生，libp2p在这些层之间也是一层层upgrade的。')]),p._v(" "),e("h4",{attrs:{id:"网络行为-network-behaviour"}},[p._v("网络行为：Network behaviour")]),p._v(" "),e("p",[p._v("如果说Transport定义了如何在网络中传输数据，那么Network Behaviour则定义了在网络中要传输什么样的数据，或者说，你的p2p协议本身。你只需要专注于数据本身而不必考虑最终数据是如何加密，使用什么协议发送出去。这个设计非常优雅，它清晰地想我们展示了什么是Separation of Concerns")]),p._v(" "),e("p",[p._v("libp2p 自带了一系列 Network behaviour —— 上图中大部分的协议，都通过 Network behaviour 实现，我举几个例子：")]),p._v(" "),e("ul",[e("li",[e("p",[p._v("Ping：节点和其 peer 之间 keepalive，以及网络诊断的工具。")])]),p._v(" "),e("li",[e("p",[p._v("mDNS：本地节点发现协议。")])]),p._v(" "),e("li",[e("p",[p._v("floodsub：floodsub protocol 实现。它是 libp2p 几种 pubsub 方案之一。适用于小型网络中消息的广播。我会单开一篇讲 pubsub 的。")])]),p._v(" "),e("li",[e("p",[p._v("kad：Kademlia 协议的实现。")])])]),p._v(" "),e("p",[p._v("除了 libp2p 默认实现的一系列 Network behaviour 外，你也可以创建新的 Network behaviour，并且把你的协议和已有的 behaviour 组合在一起。")]),p._v(" "),e("p",[p._v("要实现你自己的 Network behaviour，你需要：")]),p._v(" "),e("ul",[e("li",[e("p",[p._v("实现 "),e("code",[p._v("UpgradeInfo")]),p._v("：这告诉 libp2p 你的协议的唯一标识符，比如："),e("code",[p._v("/ipfs/ping/1.0.0")]),p._v("。")])]),p._v(" "),e("li",[e("p",[p._v("实现 "),e("code",[p._v("InboundUpgrade")]),p._v(" 和 "),e("code",[p._v("OutboundUpgrade")]),p._v("：这是协议输入输出数据的处理。")])]),p._v(" "),e("li",[e("p",[p._v("实现 "),e("code",[p._v("ProtocolsHandler")]),p._v(" 和  "),e("code",[p._v("NetworkBehaviour")]),p._v("：协议的主要处理流程。")])])]),p._v(" "),e("h3",{attrs:{id:"swarm"}},[p._v("Swarm")]),p._v(" "),e("p",[p._v("Network 定义了如何发送数据，NetworkBehaviour定义了什么时候发送什么样的数据，但是我们还缺少一个中间人，把NetworkBehaviour要发送的数据交给Network发送出去，并且把Network收到的数据交给NetworkBehaviour处理。这个中间人就是Swarm。")])])}),[],!1,null,null,null);v.default=i.exports}}]);